// home tab, which is the homepage allowing users to upload or select files to process
/*
This Component makes up the Home page of the React Web-page UI
Some important functions here are:
1. pollServer()
2. sendFileToServer()
3. onDrop() -> drop-zone for dropping PDFs
*/
import React, { Component } from 'react';
import Dropzone from 'react-dropzone'
import 'bootstrap/dist/css/bootstrap.min.css';
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';
import CardGroup from 'react-bootstrap/CardGroup';
import Form from 'react-bootstrap/Form';
import Alert from 'react-bootstrap/Alert'
import Drawer from './subcomponents/Drawer';
import codeImg from './images/code.png';
import lightbulbImg from './images/lightbulb.png';
import userImg from './images/user.png';
import plusImg from './images/plus.png';
import axios from 'axios';
import 'axios-progress-bar/dist/nprogress.css'
import { loadProgressBar } from 'axios-progress-bar'
import 'react-pdf/dist/Page/AnnotationLayer.css';
import { withStyles } from "@material-ui/core/styles";
import ProgressBar from 'react-bootstrap/ProgressBar'
import ServerInfo from './subcomponents/ServerInfo.js'; // Relative path to your File
import MaterialTable, { MTableToolbar } from 'material-table';
import OpenInNewIcon from '@material-ui/icons/OpenInNew';
import IconButton from '@material-ui/core/IconButton';
import { blue } from '@material-ui/core/colors';
import GetAppIcon from '@material-ui/icons/GetApp';
import Slider from '@material-ui/core/Slider';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import Input from '@material-ui/core/Input';
import Modal from 'react-bootstrap/Modal'
//http://ycampus.southeastasia.cloudapp.azure.com
//http://localhost

const ip = ServerInfo.split(",")[0]
const port = ServerInfo.split(",")[1]
const defaultPDF = "data:application/pdf;base64,"
const options = {
  cMapUrl: 'cmaps/',
  cMapPacked: true,
};

const styles = theme => ({
  root: {
    '& > *': {
      marginTop: theme.spacing(2),
    },
  },
});

//Prevents multiple tabs from opening
var alreadyOpenedEditPage = false
var filename = ""
var curRequestNo = ""
var fileData = ""

function startStream(currentIP, currentTime, sessionID){
  console.log("hu")
  alreadyOpenedEditPage = false;
  if (!!window.EventSource) {
    var source = new EventSource(ip + ":" + port + '/stream?currentIP=' + currentIP
                                 + "&currentTime=" + currentTime + "&sessionID=" + sessionID
                                  + "&curRequestNo=" + curRequestNo);
    source.onmessage = function(e) {
      const dictStatus = JSON.parse(e.data)

      // const originalProgress = window.homeComponent.getCurrentProgress();
      // window.homeComponent.setCurrentProgress(originalProgress + 1);
      if (dictStatus === undefined){
        return;
      }
      console.log("a")
      if (dictStatus["curRequestNo"] !== curRequestNo){
        //IF this stream request belongs to an old request cancelled by the user
        source.close();
        return;
      }
      console.log("b")

      if (window.homeComponent !== undefined &&
          dictStatus["ipExists"] === "yes" && dictStatus["timeStampExists"] === "yes") {
        const filename = dictStatus["filename"]
        const level = dictStatus["level"]
        const subject = dictStatus["subject"]
        const year = dictStatus["year"]
        const school = dictStatus["school"]
        const exam = dictStatus["exam"]
        var statusString = ""
        if (dictStatus["stage"] === 4){
          statusString = "Done!"
        } else if (dictStatus["stage"] === 3) {
          statusString = "Stage:" + dictStatus["stage"] + "/3" + "(Output Generation)" + ", " +
              "Current Question:" + dictStatus["page"] + "/" + dictStatus["total"];
        } else if (dictStatus["stage"] === 2) {
          statusString = "Stage:" + dictStatus["stage"] + "/3" + "(Digitisation)" + ", " +
              "Current Page:" + dictStatus["page"] + "/" + dictStatus["total"];
        } else if (dictStatus["stage"] === 1) {
          statusString = "Stage:" + dictStatus["stage"] + "/3" + "(Image Conversion)" +
              ", Current Page:" + dictStatus["page"] + "/" + dictStatus["total"];
        }

        //$("#data").text(statusString);
        var progress = 0
        if (dictStatus["stage"] === 1){
          progress = (((dictStatus["page"] / dictStatus["total"])) * 100/3)
        } else if (dictStatus["stage"] === 2){
          progress = (((dictStatus["page"] / dictStatus["total"])) * 100/3) + 100/3
        } else if (dictStatus["stage"] === 3){
          progress = (((dictStatus["page"] / dictStatus["total"])) * 100/3) + 200/3
        } else if (dictStatus["stage"] === 4){
          progress = 100;
        }
        if (progress > window.homeComponent.getCurrentProgress()) {
          window.homeComponent.setCurrentProgress(progress);
        }

        window.homeComponent.setExtraMsg("Status: " + statusString);
    
        var isDone = dictStatus["stage"] === 4
        if (isDone === true && alreadyOpenedEditPage === false){
          alreadyOpenedEditPage = true;
          axios.post(ip + ":" + port + "/getresult?currentIP=" + currentIP + "&currentTime=" + currentTime
                    + "&sessionID=" + sessionID, {timeout : 1000 * 10})
            .then(function (response) {
              // handle success
              let newWindow = window.open('#/edit', '_self');
              newWindow.csvdata = response.data
              newWindow.fileData = fileData
              newWindow.myname = filename
              newWindow.level = level
              newWindow.subject = subject
              newWindow.year = year
              newWindow.school = school
              newWindow.exam = exam
              source.close();
            })
            .catch(function (error) {
              // handle error
              source.close();
            })
        }
      }
    }
  }
}


class home extends Component {

  constructor(props) {
     super(props);
     this.listPdfs()
     loadProgressBar()
     const columns = [
      { title: 'Name', field: 'name' },
      { title: 'Last Modified', field: 'lastModified', editable: 'never' },
      { title: 'Status', field: 'status', editable: 'never' }
    ]

    let useCustomPageRange = false;
    if (window.useCustomPageRange === true){
      useCustomPageRange = true;
    }
     this.state = {'columns' : columns,
                  'data' : [],
                  'msgVariant':'primary',
                  'msgText':'Upload a file to begin!',
                  'extraMsg': '',
                  'currentProgress': 0,
                  'filename' : '' ,
                  'numPages' : 0,
                  'file': defaultPDF,
                  'currentPageNumber': 1,
                  'sessionID' : "",
                  'requestNo' : 1,
                  'lastClick' : null,
                  'canSendRequest' : true,
                  'minPage' : 0,
                  'maxPage' : 100,
                  'currentStartPage' : 0,
                  'currentEndPage' : 0,
                  'useCustomPageRange' : useCustomPageRange,
                  'showPopup' : false,
                  'yourIP' : "",
                  'yourTime' : "",
                  'isOwnFile' : false,
                  'formData' : "",
    }
     //is this visible
     window.homeComponent = this;
     if(window.immediatelyProcessFile === "yes"){
      this.processFile(window.file);
    }

    if(window.immediatelyOpenSinglePdf === "yes"){
      this.openSinglePdf(window.file);
    }

  }

  pollServer = (formData, filename) => {
    filename = filename.replace(".pdf", "")
    if (this.state.useCustomPageRange){
      axios.post(ip + ":" + port + "/getpdfpages?name=" + filename + "&isExisting=no", formData, {timeout : 1000 * 100000000000000000000000000})
      .then(pageResponse => {
        this.setState({
            'msgVariant':'warning', 'msgText':"Selected file: '" + filename + ".pdf, processing...",
            'extraMsg':"Status: Server responded, processing...",
            'minPage' : 1,
            'maxPage' : pageResponse.data["noOfPages"],
            'currentStartPage' : 1,
            'currentEndPage' : pageResponse.data["noOfPages"],
            'showPopup' : true,
            'filename': filename,
            'isOwnFile': true,
            'formData' : formData,
          });
      })
    }
    else {
      console.log(filename)
      this.setState({
        'msgVariant':'warning', 'msgText':"Uploaded file: '" + filename + ".pdf, processing...",
        'extraMsg':"Status: Server responded, processing...",
        'isOwnFile': true,
        'formData' : formData,
        'filename': filename,
      })
      this.sendFileToServer(true);
    }
  }
  handlePaginationChange = (e, { activePage }) => {
    this.setState({
      'currentPageNumber': activePage,
    });
  }

  listPdfs = () => {
    axios.post(ip + ":" + port + "/listpdf?options=all", {timeout : 1000 * 100000000000000000000000000})
      .then(response => {
        // handle success
        const pdfsData = response.data['Pdfs'];
        this.setState({'data' : pdfsData});
        console.log(pdfsData)
      })  
  }

  openMultiplePdf = (names) => {
    const curTime = new Date()
    curRequestNo = curRequestNo + 1;
    if (this.state.lastClick != null){
      if (curTime.getTime() - this.state.lastClick.getTime() < 5000 || this.state.canSendRequest === false){
        alert("Too many requests made, please wait a while before trying again.")
        return;
      }
    }
    this.setState({'canSendRequest' : false, 'lastClick' : curTime})

    if (names.length >= 6){
      alert("Please do not process too many files at a time as it will overload our servers. Only the first 5 files that you selected will be processed")
    }

    if (names.length === 1){
      this.openSinglePdf(names[0])
    } else {
      names.map((name, index) =>
        {
          if (index <= 4){
            if (index === names.length - 1){
              this.openSinglePdf(name)
            } else {
              let newWindow = window.open('#/home');
              // Access it using its variable
              newWindow.immediatelyOpenSinglePdf = "yes";
              newWindow.file = name;
              newWindow.useCustomPageRange = this.state.useCustomPageRange;
            }
          }
        }
      );
    }
  };

  openSinglePdf = (name) => {
    curRequestNo = curRequestNo + 1;
    this.setState({'currentProgress': 0, 'msgVariant':'warning', 'msgText':"Selected file: '" + name + ".pdf', processing...", 'extraMsg':"Status: Waiting for server response..."});
    
    axios.post(ip + ":" + port + "/killsession?sessionID=" + this.state.sessionID, {timeout : 1000 * 100000000000000000000000000})
    .then(response => {
      this.setState({'canSendRequest' : true});
      if (this.state.useCustomPageRange){
        axios.post(ip + ":" + port + "/getpdfpages?name=" + name + "&isExisting=yes", {timeout : 1000 * 100000000000000000000000000})
        .then(pageResponse => {
          this.setState({
              'msgVariant':'warning',
              'msgText':"Selected file: '" + name + ".pdf', processing...",
              'extraMsg':"Status: Server responded, processing...",
              'minPage' : 1,
              'maxPage' : pageResponse.data["noOfPages"],
              'currentStartPage' : 1,
              'currentEndPage' : pageResponse.data["noOfPages"],
              'showPopup' : true,
              'filename': name,
              'isOwnFile': false,
            });
        })
      }
      else {
        this.setState({
          'msgVariant':'warning', 'msgText':"Selected file: '" + name + ".pdf', processing...",
          'extraMsg':"Status: Server responded, processing...",
          'isOwnFile': false,
          'filename': name,
        })
        this.sendFileToServer(true);
      }
    });
  }
  sendFileToServer(ignoreCustomPageRange){
    console.log(ignoreCustomPageRange)
    let currentStartPage = 0;
    let currentEndPage = this.state.maxPage;
    if (!ignoreCustomPageRange){
      currentEndPage = this.state.currentEndPage;
      currentStartPage = this.state.currentStartPage;
    }
    
    if(!this.state.isOwnFile){
      axios.post(ip + ":" + port + "/pushfile?name=" + this.state.filename + "&currentStartPage=" + currentStartPage
      + "&currentEndPage=" + currentEndPage + "&ignoreCustomPageRange=" + ignoreCustomPageRange
      , {timeout : 1000 * 100000000000000000000000000})
      .then(pushResponse => {
        // handle success
        fileData = pushResponse.data["pdf_base64"]
        this.setState({
          'yourIP' : pushResponse.data["YourIP"],
          'yourTime' : pushResponse.data["YourTime"],
          'sessionID': pushResponse.data['YourSessionID'],
          'showPopup' : false,
        });
        startStream(this.state.yourIP, this.state.yourTime, this.state.sessionID);
        
      })
    } else {
      console.log(this.state.filename)
      axios.post(ip + ":" + port + "/uploadfile?name=" + this.state.filename + "&currentStartPage="
          + currentStartPage + "&currentEndPage=" + currentEndPage + "&ignoreCustomPageRange=" + ignoreCustomPageRange
          , this.state.formData, {timeout : 1000 * 100000000000000000000000000})
      .then(uploadResponse => {
        // handle success
        console.log(uploadResponse)
        fileData = uploadResponse.data["pdf_base64"]
        this.setState({
          'yourIP' : uploadResponse.data["YourIP"],
          'yourTime' : uploadResponse.data["YourTime"],
          'sessionID': uploadResponse.data['YourSessionID'],
          'showPopup' : false,
        });
        startStream(this.state.yourIP, this.state.yourTime, this.state.sessionID);
        
      })
    }
  }

  downloadPDFs(files) {
    files.map((file, index) =>
      {
        const name = file.name
        axios.post(ip + ":" + port + "/openpdf?name=" + name, {timeout : 1000 * 100000000000000000000000000})
        .then(response => {
          // handle success
          const linkSource = response.data['fileData'];  //localFileData
          const downloadLink = document.createElement("a");
          const fileName = name + ".pdf";
          downloadLink.href = linkSource;
          downloadLink.download = fileName;
          downloadLink.click();
        }) 
      }
    );
  }

  getIp = () => {
    return ip;  
  }

  getPort = () => {
    return port;  
  }
  
  setMsg = () => {
    //this.setState({'msgVariant':'primary', 'msgText':'Upload a file to begin!', 'extraMsg': ''});
  }

  getCurrentProgress = () => {
    return this.state.currentProgress;
  }

  setCurrentProgress = (currentProgress) => {
    this.setState({'currentProgress': currentProgress});
  }

  setExtraMsg = (extraMsg) => {
    this.setState({'extraMsg': extraMsg});
  }

  onDrop = (files) => {
    const curTime = new Date()
    if (this.state.lastClick != null){
      if (curTime.getTime() - this.state.lastClick.getTime() < 5000 || this.state.canSendRequest === false){
        alert("Too many requests made, please wait a while before trying again.")
        return;
      }
    }
    this.setState({'lastClick' : curTime})
    if (files.length >= 6){
      alert("Please do not process too many files at a time as it will overload our servers. Only the first 5 files that you selected will be processed")
    }

    if (files.length === 1){
      this.processFile(files[0])
    } else {
      files.map((file, index) =>
        {
          if (index <= 4){
            if (index === files.length - 1){
              this.processFile(file)
            } else {
              let newWindow = window.open('#/home');
              // Access it using its variable
              newWindow.immediatelyProcessFile = "yes";
              newWindow.file = file;
              newWindow.useCustomPageRange = this.state.useCustomPageRange;
            }
          }
        }
      );
    }
  };

  processFile = (file) => {
    const reader = new FileReader();
    this.setState({'currentProgress': 0});
    reader.onload = (event) => {
      //fileData = event.target.result;
    };

    reader.readAsDataURL(file);
    const filename = file.name;
    curRequestNo = curRequestNo + 1;
    this.setState({
      'canSendRequest' : false,
      'currentProgress': 0,
      'msgVariant':'warning', 'msgText':"Received file: '" + filename + "', processing...",
      'extraMsg':"Status: Waiting for server response...",
    });

    // Create an object of formData 
      const formData = new FormData();
      // Update the formData object 
      formData.append("myFile", file);
      // Request made to the backend api 
      // Send formData object 
      axios.post(ip + ":" + port + "/killsession?sessionID=" + this.state.sessionID,
          {timeout : 1000 * 100000000000000000000000000})
        .then(response => {
          this.setState({'canSendRequest' : true});
          this.pollServer(formData, filename);
      });
    }
  
  handleClosePopup = (event, newValue) => {};

  handleChangeSlider = (event, newValue) => {
    this.setState({
      'currentStartPage' : newValue[0],
      'currentEndPage' : newValue[1]
    })
  };

  handleSliderStartInputChange = (event) => {
    this.setState({
      'currentStartPage': (event.target.value === '' ? '' : Number(event.target.value))
    })
  };

  handleSliderEndInputChange = (event) => {
    this.setState({
      'currentEndPage': (event.target.value === '' ? '' : Number(event.target.value))
    })
  };

  handleSliderStartBlur = () => {
    if (this.state.currentStartPage < 0) {
      this.setState({
        'currentStartPage': 0
      })
    } else if (this.state.currentStartPage > 100) {
      this.setState({
        'currentStartPage': 100
      })
    }
  };

  handleSliderEndBlur = () => {
    if (this.state.currentEndPage < 0) {
      this.setState({
        'currentEndPage': 0
      })
    } else if (this.state.currentEndPage > 100) {
      this.setState({
        'currentEndPage': 100
      })
    }
  };

  handleChangeCheckbox = (e) => {
    this.setState({
      'useCustomPageRange' : e.target.checked})
  };

  render() {
    let list = [];
    let smallest = 149;
    let displayLength = false;
    if (this.state.data.length < smallest){
      smallest = this.state.data.length
    } else {
      displayLength = true;
    }
    
    for (var i = 10; i <= smallest + 10; i = i + 10) {
        list.push(i);
    }
    if (displayLength){
      list.push(this.state.data.length)
    }
    list = Array.from(new Set(list));

    const body = 
    <div>
      <Modal
        show={this.state.showPopup}
        backdrop="static"
        keyboard={false}
        aria-labelledby="contained-modal-title-vcenter"
        centered
        onHide={this.handleClosePopup}
      >
        <Modal.Header>
          <Modal.Title>Custom Page Range</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Grid style = {{"paddingBottom" : "15px"}} container spacing={2} alignItems="center">
        
            <Grid item>
              <Typography id="input-slider" gutterBottom>
                Page Range
              </Typography>
            </Grid>

            <Grid item>
              <Input
                value={this.state.currentStartPage}
                onChange={this.handleSliderStartInputChange}
                onBlur={this.handleSliderStartBlur}
                margin="dense"
                inputProps={{
                  step: 1,
                  min: this.state.minPage,
                  max: this.state.maxPage,
                  defaultValue: 1,
                  type: 'number',
                  'aria-labelledby': 'input-slider',
                }}
              />
            </Grid>
            
            <Grid item xs>
              <Slider
              value={[this.state.currentStartPage, this.state.currentEndPage]}
              valueLabelDisplay="auto"
              step={1}
              marks
              onChange={this.handleChangeSlider}
              min={this.state.minPage}
              max={this.state.maxPage}
              aria-labelledby="range-slider"
              />
            </Grid>

            <Grid item>
              <Input
                margin="dense"
                value={this.state.currentEndPage}
                onChange={this.handleSliderEndInputChange}
                onBlur={this.handleSliderEndBlur}
                inputProps={{
                  step: 1,
                  min: this.state.minPage,
                  max: this.state.maxPage,
                  defaultValue: this.state.maxPage,
                  type: 'number',
                  'aria-labelledby': 'input-slider',
                }}
              />
            </Grid>

          </Grid>
        </Modal.Body>
        <Modal.Footer>
          <Button onClick={() => this.sendFileToServer(false)} variant="primary">Confirm</Button>
        </Modal.Footer>
      </Modal>

      <Alert style={{"width" : "100%", "height" : "90%"}} variant={"success"}>
        <p>
          A simple React website which allows you to Digitise Singapore Primary/Secondary school exam papers from PDF, and receive the output as a CSV file containing the text of the questions.
        </p>
      </Alert>
      <Alert style={{"width" : "100%", "height" : "90%"}} variant={this.state.msgVariant}>
        <p>
          {this.state.msgText}
        </p>
        <hr/>
        <p>
          {this.state.extraMsg}
        </p>
      </Alert>
      <ProgressBar style={{"marginTop" :"10px", "marginBottom" :"10px"}} animated now={this.state.currentProgress} />

      <Form.Group style = {{"paddingTop" : "10px"}} controlId="formBasicCheckbox">
        <div style = {{flexGrow : "10", display: 'flex', flexDirection: 'row', alignItems:'left'}}>
          <Form.Check defaultChecked = {this.state.useCustomPageRange} onChange = {this.handleChangeCheckbox} type="checkbox"/>
          <div style = {{"paddingTop" : "3px"}}>
            <h6>
              Choose custom PDF page range
            </h6>
          </div>
        </div>
      </Form.Group>

      <Dropzone style={{"width" : "100%", "height" : "50%", "paddingBottom" : "10px"}} name={"hey"} onClick={this.setMsg} onDrop={this.onDrop}>
        <div style = {{flexGrow : "10", display: 'flex', flexDirection: 'column', alignItems:'center', outline: "5px dotted black"}}>
          <div style = {{height : "30px"}}>

          </div>
              <Button onClick={this.setMsg} style = {{height : "90%", width : "50%"}} variant="success">
              <Card.Img style = {{height : "50px", width : "50px"}} variant="left" src={plusImg} />
              Choose PDF File (from local drive)
              </Button>{' '}
          <div style = {{height : "20px"}}/>
          <h4>
            ... Or Drag and Drop that Document.(Multiple files supported, maximum 5)
          </h4>
          <p>
            We'll do the rest for you
          </p>
        </div>
      </Dropzone>    

      <Alert style={{"width" : "100%", "height" : "90%"}} variant={"info"}>
        <p>
          Upload your own PDF file above, or select any PDF file below from our database!  
        </p>
      </Alert>

      <MaterialTable
          title="Available PDFs"
          columns={this.state.columns}
          data={Array.from(this.state.data)}
          key={ Array.from(this.state.data).length }
          options={{
            search: true,
            exportButton: true,
            pageSize:10,
            exportAllData: true,
            pageSizeOptions: list,
            selection: true
          }}
          actions={[
            {
              icon: 'process',
              onClick: (event, data) => {
                var names = []
                data.map((rowData) =>
                {
                  names.push(rowData.name);
                }
                );
                this.openMultiplePdf(names);
              }
            },
            
          ]}
          components={{
            Action: props => (
              <div style = {{flexGrow : "10", display: 'flex', flexDirection: 'row', alignItems:'center'}} >
                <IconButton
                onClick={(event) => props.action.onClick(event, props.data)}
                  style={{ color: blue[500], textTransform: 'none' }}
                  aria-label="process"
                  title={"Process PDF"}
                >  
                  <OpenInNewIcon />
                </IconButton>
                <IconButton
                onClick={(event) => this.downloadPDFs(props.data)}
                  style={{ color: blue[500], textTransform: 'none' }}
                  aria-label="download"
                  title={"Download PDF"}
                >  
                  <GetAppIcon />
                </IconButton>
              </div>
            ),
            Toolbar: props => (
              <div>
                <MTableToolbar {...props } />
              </div>
            ),
          }}
        />

      <div style = {{"height" : "20px"}}/>
      <CardGroup>
        <Card>
          <Card.Img variant="top" src={lightbulbImg} />
          <Card.Body>
            <Card.Title>Simple to use</Card.Title>
            <Card.Text>
              Just drag-and-drop your PDF file in the box above, wait for the compression to complete and download your file. It's that simple..
            </Card.Text>
          </Card.Body>
          <Card.Footer>
            <small className="text-muted">Last updated 3 mins ago</small>
          </Card.Footer>
        </Card>
        <Card>
          <Card.Img variant="top" src={userImg} />
          <Card.Body>
            <Card.Title>User friendly</Card.Title>
            <Card.Text>
              Easy-to-use user interface that segments the exam paper PDF you upload into pages and questions. Simply edit the text within the question text boxes.
            </Card.Text>
          </Card.Body>
          <Card.Footer>
            <small className="text-muted">Last updated 3 mins ago</small>
          </Card.Footer>
        </Card>
        <Card>
          <Card.Img variant="top" src={codeImg} />
          <Card.Body>
            <Card.Title>No coding required</Card.Title>
            <Card.Text>
              Everything is done for you, just for you. The extra processing is done in the background and you will not have to worry about it.
            </Card.Text>
          </Card.Body>
          <Card.Footer>
            <small className="text-muted">Last updated 3 mins ago</small>
          </Card.Footer>
        </Card>
      </CardGroup>
    </div>
    return (
      <div>
        <Drawer content = {body} name = "Home"/>
      </div>
    );
    }
}

export default withStyles(styles, { withTheme: true })(home);